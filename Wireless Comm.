#include <msp430.h>
char buttonCount = '0';
char Sentence1[] = "Button has been pressed ";
char Sentence2[] = " times!";
int main(void)
{
	WDTCTL = WDTPW + WDTHOLD; //Stop WDT
	
		P1REN |= BIT3; //Pull-up resistor because the button is naturally a zero when the button is pressed, this line enables it
		P1OUT |= BIT3;//Pull-up Resistor.
		P1IE |= BIT3; //Enables interrupt at P1.3
	if(CALBC1_1MHZ==0xFF)
	{
		while(1);
	}
	DCOCTL = 0;
	BCSCTL1 = CALBC1_1MHZ; // Set DCO
	DCOCTL = CALDCO_1MHZ;
	P1SEL = BIT1 + BIT2 ; // P1.1 = RXD, P1.2=TXD
	P1SEL2 = BIT1 + BIT2;
	UCA0CTL1 |= UCSSEL_2; // SMCLK
	UCA0BR0 = 8; // 1MHz 115200
	UCA0BR1 = 0; // 1MHz 115200
	UCA0MCTL = UCBRS2 + UCBRS0; // Modulation UCBRSx = 5
	UCA0CTL1 &= ~UCSWRST; // **Initialize USCI state machine**
	IE2 |= UCA0RXIE; // Enable USCI_A0 RX interrupt
	__bis_SR_register(LPM0_bits + GIE); // Enter LPM0, interrupts enabled
}
// Echo back RXed character, confirm TX buffer is ready first
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
	while (!(IFG2&UCA0TXIFG)); // USCI_A0 TX buffer ready?
	UCA0TXBUF = UCA0RXBUF; // TX -> RXed characte
}
//ISR for the button press
#pragma vector=PORT1_VECTOR
__interrupt void port1_isr(void)
{
	buttonCount++;
	while (!(IFG2&UCA0TXIFG));
	int i = 0;
	for(i = 0; i < 24; i++)
	{
		UCA0TXBUF = Sentence1[i]; // Output each char, one ATAT a time.
		__delay_cycles(100);
	}
	UCA0TXBUF = buttonCount;
	for(i = 0; i < 7; i++)
		{
			UCA0TXBUF = Sentence2[i]; // Output each char, one ATAT a time.
			__delay_cycles(100);
		}
	P1IFG = 0;

//Part 2
#include <msp430.h>
char buttonCount = '0';
char Sentence1[] = "Button has been pressed ";
char Sentence2[] = " times!";
int main(void)
{
	WDTCTL = WDTPW + WDTHOLD; //Stop WDT
	
		P1REN |= BIT3; //Pull-up resistor because the button is naturally a zero when the button is pressed, this line enables it
		P1OUT |= BIT3;//Pull-up Resistor.
		P1IE |= BIT3; //Enables interrupt at P1.3
	if(CALBC1_1MHZ==0xFF)
	{
		while(1);
	}
	DCOCTL = 0;
	BCSCTL1 = CALBC1_1MHZ; // Set DCO
	DCOCTL = CALDCO_1MHZ;
	P1SEL = BIT1 + BIT2 ; // P1.1 = RXD, P1.2=TXD
	P1SEL2 = BIT1 + BIT2;
	UCA0CTL1 |= UCSSEL_2; // SMCLK
	UCA0BR0 = 8; // 1MHz 115200
	UCA0BR1 = 0; // 1MHz 115200
	UCA0MCTL = UCBRS2 + UCBRS0; // Modulation UCBRSx = 5
	UCA0CTL1 &= ~UCSWRST; // **Initialize USCI state machine**
	IE2 |= UCA0RXIE; // Enable USCI_A0 RX interrupt
	__bis_SR_register(LPM0_bits + GIE); // Enter LPM0, interrupts enabled
}
// Echo back RXed character, confirm TX buffer is ready first
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
//	while (!(IFG2&UCA0TXIFG)); // USCI_A0 TX buffer ready?
	//UCA0TXBUF = UCA0RXBUF;// TX -> RXed characte
	if(UCA0RXBUF == 'q'){
		int i = 0;
		for(i = 0; i < 24; i++)
			{
			while (!(IFG2&UCA0TXIFG));
				UCA0TXBUF = Sentence1[i]; // Output each char, one ATAT a time.
			}
		while (!(IFG2&UCA0TXIFG));
			UCA0TXBUF = buttonCount;
			for(i = 0; i < 7; i++)
				{
					while (!(IFG2&UCA0TXIFG));
					UCA0TXBUF = Sentence2[i]; // Output each char, one ATAT a time.
				}
	}
}
//ISR for the button press
#pragma vector=PORT1_VECTOR
__interrupt void port1_isr(void)
{
	buttonCount++;
	P1IFG = 0;
	}

//Part 3
#include <msp430.h>
char buttonCount = '0';
char Sentence1[] = "Button has been pressed ";
char Sentence2[] = " times!";
int main(void)
{
	WDTCTL = WDTPW + WDTHOLD; //Stop WDT
	
		P1REN |= BIT3; //Pull-up resistor because the button is naturally a zero when the button is pressed, this line enables it
		P1OUT |= BIT3;//Pull-up Resistor.
		P1IE |= BIT3; //Enables interrupt at P1.3
	if(CALBC1_1MHZ==0xFF)
	{
		while(1);
	}
	DCOCTL = 0;
	BCSCTL1 = CALBC1_1MHZ; // Set DCO
	DCOCTL = CALDCO_1MHZ;
	P1SEL = BIT1 + BIT2 ; // P1.1 = RXD, P1.2=TXD
	P1SEL2 = BIT1 + BIT2;
	UCA0CTL1 |= UCSSEL_1; // ACLK
	UCA0BR0 = 3; // 32768 kHz 9600//
	UCA0BR1 = 0; // 32768 kHz 9600
	UCA0MCTL = UCBRS2 + UCBRS0; // Modulation UCBRSx = 5
	UCA0CTL1 &= ~UCSWRST; // **Initialize USCI state machine**
	IE2 |= UCA0RXIE; // Enable USCI_A0 RX interrupt
	__bis_SR_register(LPM0_bits + GIE); // Enter LPM0, interrupts enabled
}
// Echo back RXed character, confirm TX buffer is ready first
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
//	while (!(IFG2&UCA0TXIFG)); // USCI_A0 TX buffer ready?
	//UCA0TXBUF = UCA0RXBUF;// TX -> RXed characte
	if(UCA0RXBUF == 'q'){
		int i = 0;
		for(i = 0; i < 24; i++)
			{
			while (!(IFG2&UCA0TXIFG));
				UCA0TXBUF = Sentence1[i]; // Output each char, one ATAT a time.
			}
		while (!(IFG2&UCA0TXIFG));
			UCA0TXBUF = buttonCount;
			for(i = 0; i < 7; i++)
				{
					while (!(IFG2&UCA0TXIFG));
					UCA0TXBUF = Sentence2[i]; // Output each char, one ATAT a time.
				}
	}
}
//ISR for the button press
#pragma vector=PORT1_VECTOR
__interrupt void port1_isr(void)
{
	buttonCount++;
	P1IFG = 0;
